<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>KCT framework (Posts about using_kct_blog)</title><link>https://kulvait.github.io/KCT_doc/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://kulvait.github.io/KCT_doc/categories/using_kct_blog.xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:kulvait@gmail.com"&gt;Vojtěch Kulvait&lt;/a&gt; </copyright><lastBuildDate>Tue, 14 Sep 2021 10:06:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Working with KCT CBCT 2 Projective geometry and camera matrices to describe CT geometry</title><link>https://kulvait.github.io/KCT_doc/posts/working-with-kct-cbct-2-projective-geometry-and-camera-matrices-to-describe-ct-geometry.html</link><dc:creator>Vojtěch Kulvait</dc:creator><description>&lt;div&gt;&lt;p&gt;Before we define particular geometry corresponding to the flat panel detector CT trajectory, we need to know some theory about projective geometry and camera matrices. This will be the content of this post.&lt;/p&gt;
&lt;h3&gt;CT projections geometry&lt;/h3&gt;
&lt;p&gt;In the computer tomography, we project 3D object in $ \mathbb{R}^3 $ to the projector grid. Let's say it is a two dimensional grid that consist of rectangular pixels. Natural space of the detector when considering discretization is $ \mathbb{R}^2 $ as the projections are 2D images. The process of the projection is analogous to the pinhole camera model that projects the scene onto the 2D plane. And therefore projective geometry is a good tool to study this correspondence.&lt;/p&gt;
&lt;h3&gt;Projective geometry&lt;/h3&gt;
&lt;p&gt;Projective space is a structure on top of an Vector space $\mathbf{V}$ that is not a vector space itself. For an introduction into the projective geometry, see &lt;a href="http://math.unife.it/insegnamenti/geometria-differenziale/materiale-didattico/projective.pdf"&gt;class notes of Nigel Hitchin&lt;/a&gt;. I will follow some of its definitions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The projective space $\mathcal{P}(\mathbf{V})$ of a vector space $\mathbf{V}$ is a set of one dimensional subspaces of $\mathbf{V}$. The dimension of $\mathcal{P}(\mathbf{V})$ is $dim(\mathbf{V}) - 1$. Projective space of dimension $1$ is called projective line and projective space of dimension $2$ is called projective plane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is interesting to see in this definitions, that when we take the space $\mathbb{R}^3$, where the source is placed in its origin. We constract "a set of one dimensional subspaces of $\mathbb{R}^3$", which are all the lines through the origin representing all the rays going from the source. The number of lines with this characteristic is (almost) the same as the number of the points on the unit half sphere. We however will be projecting this structure onto the planar detector.&lt;/p&gt;
&lt;h3&gt;Construction of camera matrices&lt;/h3&gt;
&lt;p&gt;Let's have the following FDCT setup&lt;/p&gt;
&lt;p&gt;&lt;img src="https://kulvait.github.io/KCT_doc/images/CTSchemeCVP.png"&gt;&lt;/p&gt;
&lt;p&gt;The configuration is uniquely determined by the position of the source $\vec{s} = (s_0, s_1, s_2)$ in the word coordinates, position of the principal point $\vec{p} = (p_0, p_1, p_2)$ that is a point on the detector such that the line |\vec{s} \vec{p}| is orthogonal to the detector surface. The ray defined by that line is called the principal ray. Apart from that we have to define position of the zero on the detector, size of the detector pixels. All this information can be embedded in the camera matrix.&lt;/p&gt;
&lt;p&gt;Size of the detector by means of the &lt;/p&gt;
&lt;p&gt;Let's suppose we have a source position $\vec{s} = (s_0, s_1, s_2)$ and that the $z$ axis of the geometry is the axis of the rotation. We further assume that principal ray hits the detector in its center and at the same time principal ray is orthogonal to $z$ axis. Lets $A$ be the distance from the source to detector $(P_0, P_1)$ be the sizes of the detector pixels in the units of the coordinates $(x,y,z)$ that are isometric. There is $M \times N$ detector pixels. Its axes will be $\chi_1$ and $\chi_2$, where $\chi_1$ will be orthogonal to $z$ and $\chi_2$ will be parrallel to $z$ with oposite orientation. Orientation of the world coordinates will be as it is described &lt;a href="https://www.slicer.org/w/img_auth.php/2/22/Coordinate_sytems.png"&gt;here&lt;/a&gt;. By angle $\omega$ we describe polar angle that principal ray from the detector to source has with $xy$ axes.&lt;/p&gt;
&lt;p&gt;From this information we construct camera matrix for given projection setup. First we transform $(x,y,z)$ to the $(x' , y' , z' )$ that is centered in the source position. First as on the projections $\chi_2$ coordinate is usually encoded going from the top to bottom we would like to identify positive direction of $\chi_2$ with negative direction of $z$ by means of $z'=-z$. We rotate the geometry in the way that $y'$ will be in the direction of principal ray and $x'$ will be colinear with $\chi_1$ on the detector. So we use the following projective element 
$$
\mathbb{X}_1 =
\begin{pmatrix} 
\sin{\alpha}&amp;amp; -\cos{\alpha} &amp;amp;0 &amp;amp;0 \\
\cos{\alpha}&amp;amp; \sin{\alpha}&amp;amp;0 &amp;amp;0 \\ 
0&amp;amp;0&amp;amp;-1&amp;amp;0 \\
0&amp;amp;0&amp;amp;0&amp;amp;1 
\end{pmatrix},
$$
where $\alpha = \atantwo{(-s_1, -s_0)}$.&lt;/p&gt;&lt;/div&gt;</description><category>using_kct_blog</category><guid>https://kulvait.github.io/KCT_doc/posts/working-with-kct-cbct-2-projective-geometry-and-camera-matrices-to-describe-ct-geometry.html</guid><pubDate>Tue, 14 Sep 2021 10:05:50 GMT</pubDate></item><item><title>Working with KCT CBCT 1 Converting DICOM volume to DEN volume</title><link>https://kulvait.github.io/KCT_doc/posts/working-with-kct-cbct-1-converting-dicom-volume-to-den-volume-using-dicom-data-from-public-repository.html</link><dc:creator>Vojtěch Kulvait</dc:creator><description>&lt;div&gt;&lt;p&gt;In this series of blog posts, I will describe how to work with the KCT framework from the first steps of importing data to the more advanced topics as a running reconstruction. &lt;/p&gt;
&lt;p&gt;In the post today, I explain how to import files in DICOM into the DEN format that is used within the framework. I use the data from the public repository.&lt;/p&gt;
&lt;h3&gt;Example dataset&lt;/h3&gt;
&lt;p&gt;I have choosen a publicly available dataset from &lt;a href="https://public.cancerimagingarchive.net/"&gt;The Cancer Imaging Archive&lt;/a&gt; containing a brain CT scan, ID TCGA-19-1787. To download this dataset I followed the procedure described on &lt;a href="https://wiki.cancerimagingarchive.net/display/NBIA/Downloading+TCIA+Images"&gt;The Cancer Imaging Archive page&lt;/a&gt;. It is needed to instal their application NBIA Data Retriever and provide it with the information in the &lt;code&gt;manifest-1631446347856.tcia&lt;/code&gt; file, which must contain the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;downloadServerUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancerimagingarchive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nbia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;servlet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DownloadServlet&lt;/span&gt;
&lt;span class="n"&gt;includeAnnotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;noOfrRetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;databasketId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1631446347856.&lt;/span&gt;&lt;span class="n"&gt;tcia&lt;/span&gt;
&lt;span class="n"&gt;manifestVersion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;span class="n"&gt;ListOfSeriesToDownload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="mf"&gt;1.3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;4.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;14519.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5826.4001&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;312669389023517091391958251391&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Example dataset is published under the terms of &lt;a href="http://creativecommons.org/licenses/by/3.0/"&gt;Creative Commons Attribution 3.0 Unported License&lt;/a&gt; and the &lt;a href="https://kulvait.github.io/KCT_doc/license-tcga-gbm.html"&gt;following terms&lt;/a&gt;. This licencing apply to any user even the user of the derived data, which I publish here in scope of this demonstration in &lt;a href="https://github.com/kulvait/KCT_den_file_opener/releases/download/v1.1.1/ExampleVolumeKCT_TCGA-19-1787.tar.xf"&gt;Example Volume TCGA-19-1787&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we unpack the data of example volume, we see that dicom files with the suffix dcm are in the directory &lt;code&gt;TCGA-19-1787/04-20-2002-NA-NR CT HEAD W CE-97133/2.000000-Head Vol.  1.5  H40s ST-51391&lt;/code&gt;. For simplicity I rename this directory just to DICOM and remove parent subdirectories. 
From the DICOM headers we can see that it is a scan on SIEMENS Sensation Cardiac 64 CT machine. It contains $124$ slices with the thickness of $1.5$mm of the dimension $512 \times 512$, the voxel sizes are ($0.64453125$mm, $0.64453125$mm, $1.5$mm).&lt;/p&gt;
&lt;h3&gt;Conversion of DICOM series to DEN format&lt;/h3&gt;
&lt;p&gt;For the purpose of this example, we have to transform the DICOM dataset into the &lt;a href="https://kulvait.github.io/KCT_doc/den-format.html"&gt;DEN format&lt;/a&gt;, which is used by KCT framework. We do it using &lt;a href="https://github.com/kulvait/KCT_denpy"&gt;KCT_denpy package&lt;/a&gt;. This package allow us to convert between the representations of the volume data as numpy.ndarray, DEN file or DICOM series. Internally it uses the package pydicom to read DICOM data.&lt;/p&gt;
&lt;p&gt;For the conversion, I have created a simple script &lt;code&gt;[DICOMTODEN.py](https://github.com/kulvait/KCT_scripts/blob/master/DICOMTODEN.py)&lt;/code&gt;. The command to convert the data to the DEN format will then be&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DICOMTODEN.py --force --dicom-file-suffix &lt;span class="s2"&gt;"dcm"&lt;/span&gt; DICOM DEN_HU
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;After you run this command, the new directory &lt;code&gt;DEN_HU&lt;/code&gt; will be created, which contains file &lt;code&gt;Series_00.den&lt;/code&gt;. This is a converted DICOM file into the DEN format. To vizualize the volume can be used &lt;a href="https://github.com/kulvait/KCT_den_file_opener/releases/download/v1.1.1/KCT_Den_File_Opener-1.1.1.jar"&gt;KCT Den file opener&lt;/a&gt;, a plugin of &lt;a href="https://imagej.nih.gov/ij/"&gt;ImageJ&lt;/a&gt; viewer that works also with &lt;a href="https://imagej.net/software/fiji/"&gt;Fiji&lt;/a&gt;. It is sufficient to put a file KCT_Den_File_Opener-1.1.1.jar into the .imagej/plugins configuration directory of ImageJ. Then simpy select &lt;code&gt;File-&amp;gt;Open DEN ..&lt;/code&gt; and navigate to &lt;code&gt;Series_00.den&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can notice that the values are integers starting from $-1024$ in the areas of the air up to values greater than $1000$ in the dense bone areas. These are in (Hounsfield units)[https://en.wikipedia.org/wiki/Hounsfield_scale], which are good for the physicans to compare tissue contrasts in a convenient scale, but they do not represent raw attenuation values. To do a projection of the data using KCT or reconstruction of these projections, we need raw attenuation values.&lt;/p&gt;
&lt;p&gt;Conversion between Hounsfield units and raw attenuation values is possible using (KCT dentk toolkit)[https://github.com/kulvait/KCT_dentk]. Install the tool &lt;code&gt;dentk-fromhu&lt;/code&gt; to your path and then the conversion can be done either by calling&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dentk-fromhu Series_00.den Series_00.raw
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;or using the script &lt;code&gt;DICOMTODEN.py&lt;/code&gt; to internally call &lt;code&gt;dentk-fromhu&lt;/code&gt; and to produce raw attenuations&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DICOMTODEN.py --force --dicom-file-suffix &lt;span class="s2"&gt;"dcm"&lt;/span&gt; --convert-hu-to-raw --base2 DICOM DEN_RAW
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;There are two caveats. First for the conversion is important the attenuation value of the water, which in Hounsfield units is exactly $0$. By default the conversion will be performed in the same way as with the setting &lt;code&gt;--water-value 0.027&lt;/code&gt;. If you know the exact attenuation value of the water for given scanner, feel free to change it.&lt;/p&gt;
&lt;p&gt;Second there is a problem that in &lt;a href="https://en.wikipedia.org/wiki/Hounsfield_scale"&gt;wiki article about Hounsfield units&lt;/a&gt; as well as in virtually every CT textbook, you can find that the minimum Hounsfield unit is 1000. DICOM data from SIEMENS scanners tend to have this minimum value $-1024$. It is due to the better data alignment with uint16 or uint32 representation of offsetted Hounsfield units. Standard conversion formula would however produce negative attenuation values. To correct for this undesired behavior we have to add &lt;code&gt;--base2&lt;/code&gt; as a parameter either to &lt;code&gt;DICOMTODEN.py&lt;/code&gt; or &lt;code&gt;dentk-fromhu&lt;/code&gt; program.&lt;/p&gt;
&lt;h3&gt;Vizualizing DEN volume of raw attenuation values derived from DICOM series&lt;/h3&gt;
&lt;p&gt;When you did everything correct, in the directory &lt;code&gt;DEN_RAW&lt;/code&gt; is the file &lt;code&gt;Series_00.den&lt;/code&gt;, which represent raw attenuation values derived from given DICOM series. You can also download &lt;a href="https://github.com/kulvait/KCT_den_file_opener/releases/download/v1.1.1/ExampleVolumeKCT_TCGA-19-1787.tar.xf"&gt;Example Volume TCGA-19-1787&lt;/a&gt;, which contain also the converted DEN volume.&lt;/p&gt;
&lt;p&gt;When vizualizing in ImageJ, you can select an area of the soft tissue and press ALT+CTRL+C. Then you can adjust the contrast. &lt;/p&gt;
&lt;p&gt;Investigating the volume in more detail from the perspective of data alignment it is apparent that the convention described on the picture &lt;a href="https://www.slicer.org/wiki/File:Coordinate_sytems.png"&gt;CT coordinates, image from the project slicer&lt;/a&gt; is observed. So that z axis is the axis of the rotation. Y axis goes from the top (above scanned subject) to bottom (under scanned object). Note, that ImageJ places the (0,0) top left and the positive direction of the Y axis is also top to bottom so that the axial image is vizualized in a natural orientation.  &lt;/p&gt;
&lt;h3&gt;Working with KCT CBCT 2&lt;/h3&gt;
&lt;p&gt;In the next post, I will explain what are the conventions for the projection geometry and how to describe the geometric setting of the flat detector CT. We define an example setup of a virtual flat detector CT machine when scannin the volume created in this post. We then use KCT framework to project the volume and create projections.&lt;/p&gt;&lt;/div&gt;</description><category>using_kct_blog</category><guid>https://kulvait.github.io/KCT_doc/posts/working-with-kct-cbct-1-converting-dicom-volume-to-den-volume-using-dicom-data-from-public-repository.html</guid><pubDate>Mon, 13 Sep 2021 10:44:40 GMT</pubDate></item></channel></rss>